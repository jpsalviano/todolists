import json
from falcon import testing, HTTP_200
from todolists import app


class TestUserRegistration(testing.TestCase):
    def setUp(self):
        super().setUp()
        self.app = app.create()

    def test_endpoint_status(self):
        result = self.simulate_get("/register")
        self.assertEqual(result.status, HTTP_200)

    def test_get_user_info_from_form(self):
        user_info = {
            "username": "john12",
            "email": "john12@fake.com",
            "password_1": "abc123-",
            "password_2": "abc123-"
        }
        result = self.simulate_post("/register", params=user_info)
        self.assertEqual(user_info, result.json)

    def test_raise_exception_if_username_too_short(self):
        user_info = {
            "username": "john1",
            "email": "john12@fake.com",
            "password_1": "abc123-",
            "password_2": "abc123-"
        }
        with self.assertRaises(app.ValidationError) as err:
            app.validate_user_info(user_info)
        self.assertEqual(err.exception.message, "Username must be 6-30 characters long.")

    def test_raise_exception_if_username_too_long(self):
        user_info = {
            "username": 31*"a",
            "email": "john12@fake.com",
            "password_1": "abc123-",
            "password_2": "abc123-"
        }
        with self.assertRaises(app.ValidationError) as err:
            app.validate_user_info(user_info)
        self.assertEqual(err.exception.message, "Username must be 6-30 characters long.")

    def test_raise_exception_if_username_contains_not_allowed_characters(self):
        user_info = {
            "username": "john.12",
            "email": "john12@fake.com",
            "password_1": "abc123-",
            "password_2": "abc123-"
        }
        with self.assertRaises(app.ValidationError) as err:
            app.validate_user_info(user_info)
        self.assertEqual(err.exception.message, "Username must contain letters and numbers only.")

    def test_raise_exception_if_passwords_dont_match(self):
        user_info = {
            "username": "john12",
            "email": "john12@fake.com",
            "password_1": "bac123-",
            "password_2": "abc123-"
        }
        with self.assertRaises(app.ValidationError) as err:
            app.validate_user_info(user_info)
        self.assertEqual(err.exception.message, "Passwords do not match!")

    def test_raise_exception_if_password_too_short(self):
        user_info = {
            "username": "john12",
            "email": "john12@fake.com",
            "password_1": "abc12",
            "password_2": "abc12"
        }
        with self.assertRaises(app.ValidationError) as err:
            app.validate_user_info(user_info)
        self.assertEqual(err.exception.message, "Password must be 6-30 characters long.")

    def test_raise_exception_if_password_too_long(self):
        user_info = {
            "username": "john12",
            "email": "john12@fake.com",
            "password_1": 31*".",
            "password_2": 31*"."
        }
        with self.assertRaises(app.ValidationError) as err:
            app.validate_user_info(user_info)
        self.assertEqual(err.exception.message, "Password must be 6-30 characters long.")

    def test_generate_code_for_email_verification(self):
        user_info = {
            "username": "john12",
            "email": "john12@fake.com",
            "password_1": "abc123-",
            "password_2": "abc123-"
        }
        result = self.simulate_post("/register", params=user_info)
        #best way to get the emamil_code that was generated by app, since from result you
        #can only get its content, text and json